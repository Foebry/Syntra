CHALLENGE 1:
Make a class Person
	- give it the following properties
		name, pet
	- create 5 instances of person and show the five pets in the console.
CHALLENGE 2:
Make a class Sport
	- give it the following properties
		name, isOlympic, isBallsport
	- create 8 sports and add them in an array
	- count all the sports that are ballsports using a reduce method (indien niet lukt met ne for-loop)
CHALLENGE 3:
Create an class Animal
	- give it the following properties
		name
		age
		isDomestic
	- give it the following abilities
		makeOlder
	- create 3 animals
	- make multiple of them age multiple times ...
	- show the name of the oldest in the console
	- give the pet the ability to catch fly's, every time it catches a fly
	  the id of the fly (random) is being added to a deathkill list of the pet
	- try to change the fly's datatype from string to object so it can hold a boolean property "survived" (33% chance to survive)
	- show the petName with the most kills in the console (nr)

CHALLENGE 4:
Create a Cart object constructor
	- the cart holds cartitems with a list of products that are bought
	- every cartitem has:
		- productId
		- productTitle
		- productPrice
		- amount
	- it has the ability to add new cartitems
	- it has the ability to remove based on ID
	- it has the ability to calculate the number of total cartitems
	- it has the ability to calculate the number of total products
	- it has the ability to calculate the total cost of the order


CHALLENGE 5:
// generate 5000 sporters
// every Sporter should have between 500 and 1000 logs
// sporter => fn, ln, log[]
//log => sport"", distance"", time""
// zwemmen -> 2a3 km 60 tot 160mins
// fietsen -> 75 a 200km  -- 200 tot 320 mins
// lopen -> 5 tot 20 km -- 25 tot 120 mins

1) + sum of all sports kms => Calculate the total distance of all traininglogs of all people
2) + person with the longest total swimming distance => search for the first-name, last-name and age of the guy that did the longest total swimdistance
3) + person with the longest swim distance log => find the guy with the biggest single distance swimtraining
4) + sum of all running km of all sporters => Calculate the total running distance of all traininglogs of all people
5) + average running speed of all sporters => Calculate avg-speed of all running of all people in all logs
6a) - getHighest cycling-avg value
6b) - fastest average cycler => Find the guy that is the fastest cycler returning its name and its avg km/h

SOME TIPS
put calculations of persons in the prototype.
- calculateTotalDistance() => optional parameter to filter on sporttype
- calculateTotalMinutes() => optional parameter to filter on sporttype
- calculateAVGSpeed() => this makes use of the previous methods

Certainly the function to calculate the total distances. => make a method that accepts an optional parameter with the sport which you want the total kms off.
Never use arrow-functions in prototype if they make use of the this-keyword
